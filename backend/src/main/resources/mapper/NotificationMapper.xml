<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.noncore.assessment.mapper.NotificationMapper">

    <resultMap id="NotificationResultMap" type="com.noncore.assessment.entity.Notification">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="recipient_id" property="recipientId" jdbcType="BIGINT"/>
        <result column="sender_id" property="senderId" jdbcType="BIGINT"/>
        <result column="title" property="title" jdbcType="VARCHAR"/>
        <result column="content" property="content" jdbcType="CLOB"/>
        <result column="type" property="type" jdbcType="VARCHAR"/>
        <result column="category" property="category" jdbcType="VARCHAR"/>
        <result column="priority" property="priority" jdbcType="VARCHAR"/>
        <result column="related_type" property="relatedType" jdbcType="VARCHAR"/>
        <result column="related_id" property="relatedId" jdbcType="BIGINT"/>
        <result column="is_read" property="isRead" jdbcType="BOOLEAN"/>
        <result column="read_at" property="readAt" jdbcType="TIMESTAMP"/>
        <result column="created_at" property="createdAt" jdbcType="TIMESTAMP"/>
        <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP"/>
        <result column="deleted" property="deleted" jdbcType="BOOLEAN"/>
    </resultMap>

    <sql id="Base_Column_List">
        id, recipient_id, sender_id, title, content, type, category, priority, 
        related_type, related_id, is_read, read_at, created_at, updated_at, deleted
    </sql>

    <!-- 插入通知 -->
    <insert id="insertNotification" parameterType="com.noncore.assessment.entity.Notification" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO notifications (
            recipient_id, sender_id, title, content, type, category, priority, 
            related_type, related_id, is_read, read_at, created_at, updated_at, deleted
        ) VALUES (
            #{recipientId}, #{senderId}, #{title}, #{content}, #{type}, #{category}, #{priority}, 
            #{relatedType}, #{relatedId}, #{isRead}, #{readAt}, #{createdAt}, #{updatedAt}, #{deleted}
        )
    </insert>

    <!-- 根据ID查询通知 -->
    <select id="selectNotificationById" parameterType="java.lang.Long" resultMap="NotificationResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM notifications
        WHERE id = #{id} AND deleted = false
    </select>

    <!-- 根据接收者ID查询通知列表 -->
    <select id="selectByRecipientId" parameterType="java.lang.Long" resultMap="NotificationResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM notifications
        WHERE recipient_id = #{recipientId} AND deleted = false
        ORDER BY created_at DESC
    </select>

    <!-- 根据发送者ID查询通知列表 -->
    <select id="selectBySenderId" parameterType="java.lang.Long" resultMap="NotificationResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM notifications
        WHERE sender_id = #{senderId} AND deleted = false
        ORDER BY created_at DESC
    </select>

    <!-- 更新通知 -->
    <update id="updateNotification" parameterType="com.noncore.assessment.entity.Notification">
        UPDATE notifications SET
            title = #{title},
            content = #{content},
            type = #{type},
            category = #{category},
            priority = #{priority},
            related_type = #{relatedType},
            related_id = #{relatedId},
            updated_at = #{updatedAt}
        WHERE id = #{id} AND deleted = false
    </update>

    <!-- 标记通知为已读 -->
    <update id="markAsRead" parameterType="java.lang.Long">
        UPDATE notifications SET 
            is_read = true,
            read_at = NOW(),
            updated_at = NOW()
        WHERE id = #{id} AND deleted = false
    </update>

    <!-- 批量标记通知为已读 -->
    <update id="markAllAsReadByRecipient" parameterType="java.lang.Long">
        UPDATE notifications SET 
            is_read = true,
            read_at = NOW(),
            updated_at = NOW()
        WHERE recipient_id = #{recipientId} AND is_read = false AND deleted = false
    </update>

    <!-- 删除通知（软删除） -->
    <update id="deleteNotification" parameterType="java.lang.Long">
        UPDATE notifications SET deleted = true, updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- 统计未读通知数量 -->
    <select id="countUnreadByRecipient" parameterType="java.lang.Long" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM notifications
        WHERE recipient_id = #{recipientId} AND is_read = false AND deleted = false
    </select>

    <!-- 根据类型查询通知列表 -->
    <select id="selectByRecipientAndType" resultMap="NotificationResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM notifications
        WHERE recipient_id = #{recipientId} AND type = #{type} AND deleted = false
        ORDER BY created_at DESC
    </select>

    <!-- 分页查询接收者的通知 -->
    <select id="selectByRecipientWithPagination" resultMap="NotificationResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM notifications
        WHERE recipient_id = #{recipientId} 
            AND deleted = false
            <if test="type != null and type != ''">
                AND type = #{type}
            </if>
        ORDER BY created_at DESC
        LIMIT #{offset}, #{size}
    </select>

    <!-- 统计通知总数（用于分页） -->
    <select id="countByRecipient" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM notifications
        WHERE recipient_id = #{recipientId} 
            AND deleted = false
            <if test="type != null and type != ''">
                AND type = #{type}
            </if>
    </select>

    <!-- 获取最近的通知列表 (DTO) -->
    <select id="findRecentNotifications" resultType="com.noncore.assessment.dto.response.StudentDashboardResponse$RecentNotificationDto">
        SELECT
            id,
            title,
            content,
            type,
            is_read,
            created_at
        FROM notifications
        WHERE recipient_id = #{recipientId} AND deleted = false
        ORDER BY created_at DESC
        LIMIT #{limit}
    </select>

</mapper> 