<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.noncore.assessment.mapper.UserMapper">

    <!-- 用户结果映射 -->
    <resultMap id="UserResultMap" type="com.noncore.assessment.entity.User">
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="email" property="email"/>
        <result column="password" property="password"/>
        <result column="role" property="role"/>
        <result column="avatar" property="avatar"/>
        <result column="first_name" property="firstName"/>
        <result column="last_name" property="lastName"/>
        <result column="display_name" property="displayName"/>
        <result column="bio" property="bio"/>
        <result column="grade" property="grade"/>
        <result column="subject" property="subject"/>
        <result column="school" property="school"/>
        <result column="phone" property="phone"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>
        <result column="deleted" property="deleted"/>
    </resultMap>

    <!-- 基础查询字段 -->
    <sql id="userColumns">
        id, username, email, password, role, avatar, first_name, last_name, 
        display_name, bio, grade, subject, school, phone, created_at, updated_at, deleted
    </sql>

    <!-- 插入用户 -->
    <insert id="insertUser" parameterType="com.noncore.assessment.entity.User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO users (
            username, email, password, role, avatar, first_name, last_name,
            display_name, bio, grade, subject, school, phone, created_at, updated_at, deleted
        ) VALUES (
            #{username}, #{email}, #{password}, #{role}, #{avatar}, #{firstName}, #{lastName},
            #{displayName}, #{bio}, #{grade}, #{subject}, #{school}, #{phone}, 
            #{createdAt}, #{updatedAt}, #{deleted}
        )
    </insert>

    <!-- 根据ID查询用户 -->
    <select id="selectUserById" parameterType="long" resultMap="UserResultMap">
        SELECT <include refid="userColumns"/>
        FROM users 
        WHERE id = #{id} AND deleted = false
    </select>

    <!-- 根据用户名查询用户 -->
    <select id="selectUserByUsername" parameterType="string" resultMap="UserResultMap">
        SELECT <include refid="userColumns"/>
        FROM users 
        WHERE username = #{username} AND deleted = false
    </select>

    <!-- 根据邮箱查询用户 -->
    <select id="selectUserByEmail" parameterType="string" resultMap="UserResultMap">
        SELECT <include refid="userColumns"/>
        FROM users 
        WHERE email = #{email} AND deleted = false
    </select>

    <!-- 更新用户信息 -->
    <update id="updateUser" parameterType="com.noncore.assessment.entity.User">
        UPDATE users SET
            username = #{username},
            email = #{email},
            avatar = #{avatar},
            first_name = #{firstName},
            last_name = #{lastName},
            display_name = #{displayName},
            bio = #{bio},
            grade = #{grade},
            subject = #{subject},
            school = #{school},
            phone = #{phone},
            updated_at = #{updatedAt}
        WHERE id = #{id} AND deleted = false
    </update>

    <!-- 更新密码 -->
    <update id="updatePassword">
        UPDATE users SET 
            password = #{password},
            updated_at = NOW()
        WHERE id = #{userId} AND deleted = false
    </update>

    <!-- 更新最后登录时间 -->
    <update id="updateLastLoginTime">
        UPDATE users SET 
            updated_at = NOW()
        WHERE id = #{userId} AND deleted = false
    </update>

    <!-- 软删除用户 -->
    <update id="deleteUser" parameterType="long">
        UPDATE users SET 
            deleted = true,
            updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- 检查用户名是否存在 -->
    <select id="checkUsernameExists" resultType="int">
        SELECT COUNT(1) FROM users 
        WHERE username = #{username} AND deleted = false
        <if test="excludeId != null">
            AND id != #{excludeId}
        </if>
    </select>

    <!-- 检查邮箱是否存在 -->
    <select id="checkEmailExists" resultType="int">
        SELECT COUNT(1) FROM users 
        WHERE email = #{email} AND deleted = false
        <if test="excludeId != null">
            AND id != #{excludeId}
        </if>
    </select>

    <!-- 根据角色查询用户列表 -->
    <select id="selectUsersByRole" parameterType="string" resultMap="UserResultMap">
        SELECT <include refid="userColumns"/>
        FROM users 
        WHERE role = #{role} AND deleted = false
        ORDER BY created_at DESC
    </select>

    <!-- 分页查询用户 -->
    <select id="selectUsersWithPagination" resultMap="UserResultMap">
        SELECT <include refid="userColumns"/>
        FROM users 
        WHERE deleted = false
        <if test="role != null and role != ''">
            AND role = #{role}
        </if>
        <if test="keyword != null and keyword != ''">
            AND (username LIKE CONCAT('%', #{keyword}, '%') 
                 OR email LIKE CONCAT('%', #{keyword}, '%')
                 OR display_name LIKE CONCAT('%', #{keyword}, '%'))
        </if>
        ORDER BY created_at DESC
    </select>

    <!-- 根据课程ID查询已选课学生 -->
    <select id="selectStudentsByCourseId" parameterType="long" resultMap="UserResultMap">
        SELECT u.id, u.username, u.email, u.role, u.avatar, u.first_name, u.last_name,
               u.display_name, u.bio, u.grade, u.subject, u.school, u.phone, 
               u.created_at, u.updated_at, u.deleted
        FROM users u
        INNER JOIN enrollments e ON u.id = e.student_id
        WHERE e.course_id = #{courseId} AND u.deleted = false AND e.status = 'enrolled'
        ORDER BY e.enrolled_at DESC
    </select>

    <!-- 批量更新用户状态 -->
    <update id="batchUpdateUserStatus">
        UPDATE users SET 
            deleted = #{deleted},
            updated_at = NOW()
        WHERE id IN 
        <foreach collection="userIds" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </update>

    <!-- 统计用户数量 -->
    <select id="countUsersByRole" resultType="int">
        SELECT COUNT(1) FROM users 
        WHERE deleted = false
        <if test="role != null and role != ''">
            AND role = #{role}
        </if>
    </select>

    <!-- 查询活跃用户（最近30天有活动） -->
    <select id="selectActiveUsers" resultMap="UserResultMap">
        SELECT <include refid="userColumns"/>
        FROM users 
        WHERE deleted = false AND updated_at >= DATE_SUB(NOW(), INTERVAL 30 DAY)
        ORDER BY updated_at DESC
        LIMIT #{limit}
    </select>

    <!-- 根据ID列表查询用户 -->
    <select id="selectUsersByIds" resultMap="UserResultMap">
        SELECT <include refid="userColumns"/>
        FROM users 
        WHERE deleted = false AND id IN
        <foreach collection="userIds" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </select>

    <!-- 根据用户名查询用户 -->
    <select id="selectByUsername" parameterType="string" resultMap="UserResultMap">
        SELECT 
        <include refid="userColumns"/>
        FROM users
        WHERE username = #{username}
        AND deleted = false
    </select>

    <!-- 根据邮箱查询用户 -->
    <select id="selectByEmail" parameterType="string" resultMap="UserResultMap">
        SELECT 
        <include refid="userColumns"/>
        FROM users
        WHERE email = #{email}
        AND deleted = false
    </select>
</mapper> 