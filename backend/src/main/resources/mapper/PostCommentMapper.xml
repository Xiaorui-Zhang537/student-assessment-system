<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.noncore.assessment.mapper.PostCommentMapper">

    <!-- 评论基本字段映射 -->
    <resultMap id="BaseResultMap" type="com.noncore.assessment.entity.PostComment">
        <id column="id" property="id"/>
        <result column="post_id" property="postId"/>
        <result column="author_id" property="authorId"/>
        <result column="parent_id" property="parentId"/>
        <result column="content" property="content"/>
        <result column="likes_count" property="likesCount"/>
        <result column="status" property="status"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>
        <result column="deleted" property="deleted"/>
    </resultMap>

    <!-- 带作者信息的详情映射 -->
    <resultMap id="DetailResultMap" type="com.noncore.assessment.entity.PostComment" extends="BaseResultMap">
        <association property="author" javaType="com.noncore.assessment.entity.User">
            <id column="author_id" property="id"/>
            <result column="author_username" property="username"/>
            <result column="author_nickname" property="nickname"/>
            <result column="author_avatar" property="avatar"/>
        </association>
    </resultMap>

    <!-- 通用字段列表 -->
    <sql id="Base_Column_List">
        c.id, c.post_id, c.author_id, c.parent_id, c.content, c.likes_count, c.status, c.created_at, c.updated_at, c.deleted
    </sql>
    <!-- 详情字段列表（附带作者） -->
    <sql id="Detail_Column_List">
        <include refid="Base_Column_List"/>,
        u.username as author_username, u.nickname as author_nickname, COALESCE(u.nickname, u.username) as author_display_name, u.avatar as author_avatar
    </sql>

    <!-- 动态条件 -->
    <sql id="Where_Clause">
        <where>
            c.deleted = false
            <if test="id != null">AND c.id = #{id}</if>
            <if test="postId != null">AND c.post_id = #{postId}</if>
            <if test="authorId != null">AND c.author_id = #{authorId}</if>
            <if test="parentId != null">AND c.parent_id = #{parentId}</if>
            <if test="status != null and status != ''">AND c.status = #{status}</if>
        </where>
    </sql>

    <!-- 插入评论 -->
    <insert id="insert" parameterType="com.noncore.assessment.entity.PostComment" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO post_comments
        (post_id, author_id, parent_id, content, likes_count, status, created_at, updated_at, deleted)
        VALUES
            (#{postId}, #{authorId}, #{parentId}, #{content}, #{likesCount}, #{status}, NOW(), NOW(), #{deleted})
    </insert>

    <!-- 根据ID查评论 -->
    <select id="selectById" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM post_comments c
        WHERE c.id = #{id} AND c.deleted = false
    </select>

    <!-- 根据ID查详情 -->
    <select id="selectDetailById" resultMap="DetailResultMap">
        SELECT <include refid="Detail_Column_List"/>
        FROM post_comments c
        LEFT JOIN users u ON c.author_id = u.id
        WHERE c.id = #{id} AND c.deleted = false
    </select>

    <!-- 更新评论 -->
    <update id="updateById" parameterType="com.noncore.assessment.entity.PostComment">
        UPDATE post_comments
        <set>
            <if test="content != null">content = #{content},</if>
            <if test="status != null">status = #{status},</if>
            updated_at = NOW()
        </set>
        WHERE id = #{id}
    </update>

    <!-- 删除评论 -->
    <delete id="deleteById">
        DELETE FROM post_comments WHERE id = #{id}
    </delete>

    <!-- 软删除 -->
    <update id="softDeleteById">
        UPDATE post_comments SET deleted = true, updated_at = NOW() WHERE id = #{id}
    </update>

    <!-- 查询列表（可分页/多条件） -->
    <select id="selectList" parameterType="map" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM post_comments c
        <include refid="Where_Clause"/>
        ORDER BY c.created_at
    </select>

    <!-- 查询详情列表 -->
    <select id="selectDetailList" parameterType="map" resultMap="DetailResultMap">
        SELECT <include refid="Detail_Column_List"/>
        FROM post_comments c
        LEFT JOIN users u ON c.author_id = u.id
        <include refid="Where_Clause"/>
        <choose>
            <when test="orderBy != null and orderBy == 'hot'">
                ORDER BY c.likes_count DESC, c.created_at DESC
            </when>
            <otherwise>
                ORDER BY c.created_at DESC
            </otherwise>
        </choose>
    </select>

    <!-- 查询总数 -->
    <select id="countList" parameterType="map" resultType="long">
        SELECT COUNT(*)
        FROM post_comments c
        <include refid="Where_Clause"/>
    </select>

    <!-- 根据帖子ID查评论列表 -->
    <select id="selectByPostId" resultMap="DetailResultMap">
        SELECT <include refid="Detail_Column_List"/>
        FROM post_comments c
        LEFT JOIN users u ON c.author_id = u.id
        WHERE c.post_id = #{postId} AND c.deleted = false AND c.status = 'published'
        <if test="params.parentId != null">AND c.parent_id = #{params.parentId}</if>
        <choose>
            <when test="params.orderBy != null and params.orderBy == 'hot'">
                ORDER BY c.likes_count DESC, c.created_at DESC
            </when>
            <otherwise>
                ORDER BY c.created_at DESC
            </otherwise>
        </choose>
    </select>

    <!-- 帖子评论总数 -->
    <select id="countByPostId" resultType="long">
        SELECT COUNT(*)
        FROM post_comments c
        WHERE c.post_id = #{postId} AND c.deleted = false AND c.status = 'published'
        <if test="params.parentId != null">AND c.parent_id = #{params.parentId}</if>
    </select>

    <!-- 根据用户ID查评论 -->
    <select id="selectByUserId" resultMap="DetailResultMap">
        SELECT <include refid="Detail_Column_List"/>
        FROM post_comments c
        LEFT JOIN users u ON c.author_id = u.id
        WHERE c.author_id = #{userId} AND c.deleted = false
        <if test="params.status != null and params.status != ''">AND c.status = #{params.status}</if>
        ORDER BY c.created_at DESC
    </select>

    <!-- 用户评论总数 -->
    <select id="countByUserId" resultType="long">
        SELECT COUNT(*)
        FROM post_comments c
        WHERE c.author_id = #{userId} AND c.deleted = false
        <if test="params.status != null and params.status != ''">AND c.status = #{params.status}</if>
    </select>

    <!-- 最新评论（帖） -->
    <select id="selectRecentByPostId" resultMap="DetailResultMap">
        SELECT <include refid="Detail_Column_List"/>
        FROM post_comments c
        LEFT JOIN users u ON c.author_id = u.id
        WHERE c.post_id = #{postId} AND c.deleted = false AND c.status = 'published'
        ORDER BY c.created_at DESC
        LIMIT #{limit}
    </select>

    <!-- 帖子最后一条评论 -->
    <select id="selectLastByPostId" resultMap="DetailResultMap">
        SELECT <include refid="Detail_Column_List"/>
        FROM post_comments c
        LEFT JOIN users u ON c.author_id = u.id
        WHERE c.post_id = #{postId} AND c.deleted = false AND c.status = 'published'
        ORDER BY c.created_at DESC
        LIMIT 1
    </select>

    <!-- 点赞/取消点赞 -->
    <update id="incrementLikes">
        UPDATE post_comments SET likes_count = likes_count + 1, updated_at = NOW() WHERE id = #{id}
    </update>
    <update id="decrementLikes">
        UPDATE post_comments SET likes_count = GREATEST(0, likes_count - 1), updated_at = NOW() WHERE id = #{id}
    </update>

    <!-- 查询子评论 -->
    <select id="selectReplies" resultMap="DetailResultMap">
        SELECT <include refid="Detail_Column_List"/>
        FROM post_comments c
        LEFT JOIN users u ON c.author_id = u.id
        WHERE c.parent_id = #{parentId} AND c.deleted = false AND c.status = 'published'
        ORDER BY c.created_at
    </select>
    <select id="countReplies" resultType="long">
        SELECT COUNT(*)
        FROM post_comments c
        WHERE c.parent_id = #{parentId} AND c.deleted = false AND c.status = 'published'
    </select>

</mapper>